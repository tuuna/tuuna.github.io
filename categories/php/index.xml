<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on 洛文小站</title>
    <link>http://tuuna.top/categories/php/</link>
    <description>Recent content in php on 洛文小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 Mar 2017 10:07:31 +0000</lastBuildDate><atom:link href="http://tuuna.top/categories/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laravel 手动分页实现详解</title>
      <link>http://tuuna.top/2017/03/14/laravel_pagination/</link>
      <pubDate>Tue, 14 Mar 2017 10:07:31 +0000</pubDate>
      
      <guid>http://tuuna.top/2017/03/14/laravel_pagination/</guid>
      <description>因为Laravel 手册上对于手动分页的描述并不详细，这里大概说说笔者的实现方法
 场景说明 在写一个大分类下所有文章的列表页时，笔者把取出来的数据都转换成了数组,这里为了清晰的说明并没有使用Repository来进行封装。
/** * 当parent_id为0时为顶级分类，这时候会把顶级分类 * 下的文章以及子分类下的文章都放到一个数组中 * 当parent_id不为0时取出对应分类下的文章 */ Cate::find($id)-&amp;gt;first()-&amp;gt;parent_id == 0 ? $listInfo = array_merge(Cate::with(&#39;articles&#39;)-&amp;gt;where(&#39;id&#39;,$id)-&amp;gt;get()-&amp;gt;toArray(), Cate::with(&#39;articles&#39;)-&amp;gt;where(&#39;parent_id&#39;,$id)-&amp;gt;get()-&amp;gt;toArray()) : $listInfo = Cate::with(&#39;articles&#39;)-&amp;gt;where(&#39;id&#39;,$id)-&amp;gt;get()-&amp;gt;toArray(); 因为转换成数组的缘故，不能直接使用paginate()方法来实现分页。
手动实现分页 /** * ArticleListController.php * */ &amp;lt;?php namespace App\Http\Controllers; use App\Cate; use Illuminate\Pagination\LengthAwarePaginator; class ArtlistController extends AppController { public function index($id) { Cate::find($id)-&amp;gt;first()-&amp;gt;parent_id == 0 ? $listInfo = array_merge(Cate::with(&#39;articles&#39;)-&amp;gt;where(&#39;id&#39;,$id)-&amp;gt;get()-&amp;gt;toArray(), Cate::with(&#39;articles&#39;)-&amp;gt;where(&#39;parent_id&#39;,$id)-&amp;gt;get()-&amp;gt;toArray()) : $listInfo = Cate::with(&#39;articles&#39;)-&amp;gt;where(&#39;id&#39;,$id)-&amp;gt;get()-&amp;gt;toArray(); $count = 0; foreach ($listInfo as $item) { $count += count($item[&#39;articles&#39;]); } $paginator = new LengthAwarePaginator($listInfo,$count,4); $categories = $this-&amp;gt;parent(); return view(&#39;article.</description>
    </item>
    
    <item>
      <title>Laravel收发邮件一个致命的错误</title>
      <link>http://tuuna.top/2017/02/27/laravel_mail_error/</link>
      <pubDate>Mon, 27 Feb 2017 13:21:39 +0000</pubDate>
      
      <guid>http://tuuna.top/2017/02/27/laravel_mail_error/</guid>
      <description>被这个错误坑了两次，感觉一定要总结出来了TAT
 错误情况 Expected response code 250 but got code &amp;quot;553&amp;quot;, with message &amp;quot;553 Mail from must equal authorized user &amp;quot; 这里以163网易邮件为例
ps.当然出现这个问题的原因不一定是我所说的注意事项，请对号入座
错误原因 因为Laravel的.env中的默认配置项只有以下几项
MAIL_DRIVER=smtp MAIL_HOST=smtp.163.com MAIL_PORT=465 MAIL_USERNAME=your_username MAIL_PASSWORD=your_authorization_code MAIL_ENCRYPTION=ssl 这里要注意的是在MAIL_PASSWORD这一栏中我写的是授权码而不是密码，这里的授权码需要去163中设置，不详述。
 但是我们注意一下config/mail.php中有两项
&#39;from&#39; =&amp;gt; [ &#39;address&#39; =&amp;gt; env(&#39;MAIL_FROM_ADDRESS&#39;, &#39;hello@example.com&#39;), &#39;name&#39; =&amp;gt; env(&#39;MAIL_FROM_NAME&#39;, &#39;Example&#39;), ], 这里的MAIL_FROM_ADDRESS,MAIL_FROM_NAME在配置文件中是没有的。所以我们应该加到.env中
MAIL_FROM_ADDRESS填写你的邮件，MAIL_FROM_ADDRESS填写你的名字(可任取)
然后重启一下服务器即可。</description>
    </item>
    
    <item>
      <title>Laravel 5.4中使用Vuejs的坑</title>
      <link>http://tuuna.top/2017/02/07/laravel_vue/</link>
      <pubDate>Tue, 07 Feb 2017 03:07:40 +0000</pubDate>
      
      <guid>http://tuuna.top/2017/02/07/laravel_vue/</guid>
      <description>Webpack的方式改变 使用过5.2或5.3的可能使用过Laravel-elixir,默认会有一个gulpfile.js来使用laravel-elixir进行webpack
const elixir = require(&#39;laravel-elixir&#39;); require(&#39;laravel-elixir-vue-2&#39;); /* |-------------------------------------------------------------------------- | Elixir Asset Management |-------------------------------------------------------------------------- | | Elixir provides a clean, fluent API for defining some basic Gulp tasks | for your Laravel application. By default, we are compiling the Sass | file for your application as well as publishing vendor resources. | */ elixir((mix) =&amp;gt; { mix.sass(&#39;app.scss&#39;) .webpack(&#39;app.js&#39;); }); 在webpack的时候需要输入命令$ gulp
 然而在Laravel 5.4中使用的是Laravel-mix，通过查看webpack.mix.js可以发现使用了ES6的语法
const { mix } = require(&#39;laravel-mix&#39;); /* |-------------------------------------------------------------------------- | Mix Asset Management |-------------------------------------------------------------------------- | | Mix provides a clean, fluent API for defining some Webpack build steps | for your Laravel application.</description>
    </item>
    
    <item>
      <title>Laravel 中点赞功能实现</title>
      <link>http://tuuna.top/2017/01/21/laravel_like/</link>
      <pubDate>Sat, 21 Jan 2017 05:41:36 +0000</pubDate>
      
      <guid>http://tuuna.top/2017/01/21/laravel_like/</guid>
      <description>本文建立于没有用户登录的简单点赞功能，主要使用了Ajax,Redis
 配置   首先需要根据官网的指南下载好predis
$ composer require predis/predis   然后在database.php中配置好redis
&#39;redis&#39; =&amp;gt; [   ‘client’ =&amp;gt; ‘predis’,
‘cluster’ =&amp;gt; false,
‘default’ =&amp;gt; [ ‘host’ =&amp;gt; env(‘REDIS_HOST’, ‘localhost’), ‘password’ =&amp;gt; env(‘REDIS_PASSWORD’, null), ‘port’ =&amp;gt; env(‘REDIS_PORT’, 6379), ‘database’ =&amp;gt; 0, ],
],
**注意:** 如果系统用pecl下载了redis，那么上面配置中的client对应的值应该改成phpredis。笔主在本地环境下不加上client也是不会报错的，当然还是要看个人本地或者生产环境下的配置了。 - 最后要在对应的控制器下使用redis use Illuminate\Support\Facades\Redis;
Redis的使用方式可自行查询手册 ### 点赞的基本原理以及实现思路 **原理：**在用户点赞之后会通过Ajax向后台发起请求，后台首先检测用户是否已经点赞(从Redis中取键值，点赞为1,未点赞为0)。返回对应的状态码给js。BTW，如果加入了用户登录之类的，那么在当前用户点赞之后生成一个cookie来直接判断用户是否已经点赞，就不需要后端再查询数据库，提高响应速度。 **实现思路：**在点赞页的控制器中把当前的点赞情况绑定到视图中，视图中通过js监控点赞按钮，如果点击那么就访问后端逻辑页面来进行逻辑处理。 class IndexController extends Controller { public function index() { $allClick = Redis::get(“click”);
return view(‘index’,[‘click’ =&amp;gt; $allClick]); }</description>
    </item>
    
  </channel>
</rss>
