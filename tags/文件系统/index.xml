<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文件系统 on 洛文小站</title>
    <link>https://tuuna.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 文件系统 on 洛文小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 26 Sep 2019 09:15:52 +0000</lastBuildDate><atom:link href="https://tuuna.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DB与FS比较</title>
      <link>https://tuuna.github.io/2019/09/26/DB_fs_compare/</link>
      <pubDate>Thu, 26 Sep 2019 09:15:52 +0000</pubDate>
      
      <guid>https://tuuna.github.io/2019/09/26/DB_fs_compare/</guid>
      <description>文章目录  数据库以及FS比较  HDFS、Ceph差异对比  HDFS设计目标 HDFS文件目录 Ceph设计目标 Ceph数据结构 HDFS文件导出 Ceph文件导出 暂时的结论 其它FS选型 其它思路 总结   Hbase、Cassendra、TiDB适用场景以及相关生态  Hbase  基本简介 特性 优势 缺点   Cassendra  基本简介 重要特性 优势 劣势   TiDB  基本简介 特性 使用场景 生态     已存在HDFS中的解析成结果数据  导入到 SQL 从 Sqoop 中导出      HDFS、Ceph差异对比 HDFS设计目标   存储非常大的文件：这里非常大指的是几百M、G、或者TB级别。实际应用中已有很多集群存储的数据达到PB级别。根据Hadoop官网，Yahoo！的Hadoop集群约有10万颗CPU，运行在4万个机器节点上。更多世界上的Hadoop集群使用情况，参考Hadoop官网.
  采用流式的数据访问方式: HDFS基于这样的一个假设：最有效的数据处理模式是一次写入、多次读取数据集经常从数据源生成或者拷贝一次，然后在其上做很多分析工作 分析工作经常读取其中的大部分数据，即使不是全部。 因此读取整个数据集所需时间比读取第一条记录的延时更重要。
  运行于商业硬件上: Hadoop不需要特别贵的、reliable的机器，可运行于普通商用机器（可以从多家供应商采购） 商用机器不代表低端机器在集群中（尤其是大的集群），节点失败率是比较高的HDFS的目标是确保集群在节点失败的时候不会让用户感觉到明显的中断。</description>
    </item>
    
  </channel>
</rss>
